// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: myproto.proto

package myproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloserverClient is the client API for Helloserver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloserverClient interface {
	// 打招呼函数
	Sayhello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloRsp, error)
	// 说名字的服务
	Sayname(ctx context.Context, in *NameReq, opts ...grpc.CallOption) (*NameRsp, error)
}

type helloserverClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloserverClient(cc grpc.ClientConnInterface) HelloserverClient {
	return &helloserverClient{cc}
}

func (c *helloserverClient) Sayhello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloRsp, error) {
	out := new(HelloRsp)
	err := c.cc.Invoke(ctx, "/myproto.Helloserver/Sayhello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloserverClient) Sayname(ctx context.Context, in *NameReq, opts ...grpc.CallOption) (*NameRsp, error) {
	out := new(NameRsp)
	err := c.cc.Invoke(ctx, "/myproto.Helloserver/Sayname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloserverServer is the server API for Helloserver service.
// All implementations must embed UnimplementedHelloserverServer
// for forward compatibility
type HelloserverServer interface {
	// 打招呼函数
	Sayhello(context.Context, *HelloReq) (*HelloRsp, error)
	// 说名字的服务
	Sayname(context.Context, *NameReq) (*NameRsp, error)
	mustEmbedUnimplementedHelloserverServer()
}

// UnimplementedHelloserverServer must be embedded to have forward compatible implementations.
type UnimplementedHelloserverServer struct {
}

func (UnimplementedHelloserverServer) Sayhello(context.Context, *HelloReq) (*HelloRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sayhello not implemented")
}
func (UnimplementedHelloserverServer) Sayname(context.Context, *NameReq) (*NameRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sayname not implemented")
}
func (UnimplementedHelloserverServer) mustEmbedUnimplementedHelloserverServer() {}

// UnsafeHelloserverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloserverServer will
// result in compilation errors.
type UnsafeHelloserverServer interface {
	mustEmbedUnimplementedHelloserverServer()
}

func RegisterHelloserverServer(s grpc.ServiceRegistrar, srv HelloserverServer) {
	s.RegisterService(&Helloserver_ServiceDesc, srv)
}

func _Helloserver_Sayhello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloserverServer).Sayhello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myproto.Helloserver/Sayhello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloserverServer).Sayhello(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Helloserver_Sayname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloserverServer).Sayname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myproto.Helloserver/Sayname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloserverServer).Sayname(ctx, req.(*NameReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Helloserver_ServiceDesc is the grpc.ServiceDesc for Helloserver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Helloserver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "myproto.Helloserver",
	HandlerType: (*HelloserverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sayhello",
			Handler:    _Helloserver_Sayhello_Handler,
		},
		{
			MethodName: "Sayname",
			Handler:    _Helloserver_Sayname_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "myproto.proto",
}
