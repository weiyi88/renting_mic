
一，微服务 与 微服务架构

微服务和微服务脚骨，是两个不同的概念，平时说的微服务已经包含两个概念，所以要把她们说清楚。
微服务架构是一个设计方法，而微服务应指使用这种方法而设计的一个应用

微服务框架是将复杂的系统使用组件化的方式进行拆分，并使用清凉级通讯方式进行整合的一个设计方法。

微服务是通过这种架构设计方法拆分出来的一个独立的组件化的小应用

经复杂的系统进行拆分的方法，就是"分而治之"，分而治之，可以让复杂的事情变得简单，符合平时处理的问题的方法

使用轻量级通讯等方式进行整合的设计，就是"合而用之"的方法，合而用之，可以让微小的力量变强大


二，微服务重要组件

跨语言，跨平台，通讯格式    protobuf
通讯协议                 grpc
调度管理服务发现          consul
微服务的框架             micro
部署                    docker


三，protobuf

优点：
    数据化格式可以随意编写

缺点：
    功能简单，无法表示复杂概念
    如果没有    .proto定义    否则无法独处protobuf任何内容


1,安装
    （1）protobuf安装
        https://github.com/protocolbuffers/protobuf
        下载对应系统，放入PATH中
    （2）go 语言插件安装
        https://github.com/grpc-ecosystem/grpc-gateway
        go install 后 在GOPATH bin目录下，有可执行文件，放入 PATH中

2，使用
    (1)protobuf 语法 ，向下兼容
        protobuf 3 可以使用protobuf 2 语法， protobuf2 不能使用protobuf3 语法

   （2）protocol 编译器
        protoc --proto_path= IMPORT_PATH --cpp_out=DST_DIR --python_out=DST_DIR -- go_out=DST_DIR path/to/file.proto

        IMPORT_PATH 声明一个 .proto 文件所在的解析import具体目录，忽略则使用当前目录，多个可以多次调用--proto_path

        --go_out 在目标目录DST_DIR 中产生Go代码

   （3）测试
        protobuf 使用是将，数据结构写入.proto 文件中，使用 protoc 编译器得到一个新的go包，

三，gRPC

    gRPC 是一个高性能、开源和通用的RPC框架，面向移动 和 HTTP/2 设计。 gRPC基于 HTTP/2 编撰设计，
    带来诸如，双向流，流控，头部压缩，单TCP 连接上的多复用。这些在移动设备上表现更好、更省电、和节省空间占用

    RPC 远程过程调用协议，一种通过网络从远程计算机程序上请求服务，不需要了解底层网络技术的协议
    跟访问或者web请求差不多，都是一个client 向远端服务器请求返回结果，但是web请求使用的网络协议是http高层协议，rpc所使用的协议多为TCP，是网络层协议，减少信包装，加快处理速度

    1，过程
        （1）调用客户端句柄；执行传送参数
        （2）调用本地系统内核发送网络消息
        （3）消息传送到远程主机
        （4）服务器句柄得到消息并取得参数
        （5）执行远程过程
        （6）执行到过程将结果返回服务器句柄
        （7）服务器句柄返回结果，调用远程系统内核
        （8）消息传回本地主机
        （9）客户句柄由内核接收消息
        （10）客户端接收句柄返回的数据

    2，rpc
        rpc包提供了，通过网络或者其他I/O 链接对象对到处方法对访问。
        服务端注册一个对象，使他作为一个服务被暴露，服务对名字应该是该对象对类型名。
        注册之后，对象的到处方法就可以被远程访问。服务端可以注册多个不同类型对对象（服务），但注册具有相同类型但多个对象是错误但

        只有满足如下标注但方法才能被远程访问：
            方法是导出的
            方法有两个参数，都是导出或者内建类型
            方法的第二个参数是指针
            方法只有一个error接口类型的返回值

        func (t *T) MethodName(argType T1, relyType *T2)error


四，服务发现  Consul
    1，consul 角色
    client 客户端无状态，将http 和 dns 接口请求转发给局域网内的服务端集群
    server 服务端，保存配置信息，高可用集群，在局域网与本地客户端通讯，通过广域网与其他数据中心通讯，每个数据中心的server数量推荐为3-5个

    2，运行consul代理
    consul 是典型的 C/S 架构， 可以运行服务模式或者客户模式。每一个数据中心必须至少有个一个服务节点，非常不建议只运行一个服务节点，因为节点失效情况下数据极大的丢失风险。

    3，运行Agent
    完成按轧辊后，必须运行agent，agent 可以运行为server或者 client 模式，每一个数据中心至少必须拥有一台server。

    其他的 agent 运行为client 模式，一个client 是一个非常轻量级的进程，用于注册服务，运行健康检查和转发对server的查询，agent必须在集群中的每个主机上运行

    （1）命令
        consul agent -server -bootstrap-expect 2 -data-dir /tmp/consul -node=n1 -bind=192.168.110.123 -ui -config-dir /etc/consul.d
        -rejon -join 192.168.110.123 -client 0.0.0.0

        -server     定义agent 运行在server模式
        -bootstrap-expect   在一个datacenter中期望提供server节点数目，当该值提供的时候，consul一只等到达到指定的server数量时候才会引导整个集群，该标记不能和bootstrap共用
        -data-dir   提供一个目录来存放agent 的状态，所有agent 允许都需要该目录，必须是稳定的，系统重起都继续存在
        -node       节点在集群中的名称，在一个集群中必须是唯一的，默认是该节点的主机名
        -bind       该地址用来在集群内部的通讯，集群内的所有节点到底值都必须是可达的，默认是 0.0.0.0
        -ui         启动web界面
        -config-dir 配置文件目录，里面所有 .json 结尾的文件都会被加载
        -rejoin     使consul 忽略先前的离开，在再次启动后仍旧尝试加入集群中
        -client     consul 服务监听地址，整个提供http、dns、rpc等服务，默认是127.0.0.1 所以不对外提供服务， 要对外提供服务改成 0.0.0.0
        -join       启动时候加入该集群


五，微服务micro
    1，使用
        通过指定相对与 $GOPATH 的目录路径，创建一个新的微服务

        micro new [command options ] [ arguments....]
        -- namespace    命名空间
        --type          服务类型，api, fnc , srv ,web
        --fqdn          服务的正式定义全面
        --alias         别名，作为组合的一部分使用的短名称

        run             运行这个微服务





// git 要输入 Username for 'https://github.com': 情况
Username => git 邮箱名
password => git tocken  不是密码



consul 配置
{
    "service":{
        "name":"web",
        "tags":["master"],
        "address":"127.0.0.1",
        "port":9021,
        "check":[
        {
        "http":"http://locahost:9021/health",
        "interval":"10s",
        }]
    }
}