
一，微服务 与 微服务架构

微服务和微服务脚骨，是两个不同的概念，平时说的微服务已经包含两个概念，所以要把她们说清楚。
微服务架构是一个设计方法，而微服务应指使用这种方法而设计的一个应用

微服务框架是将复杂的系统使用组件化的方式进行拆分，并使用清凉级通讯方式进行整合的一个设计方法。

微服务是通过这种架构设计方法拆分出来的一个独立的组件化的小应用

经复杂的系统进行拆分的方法，就是"分而治之"，分而治之，可以让复杂的事情变得简单，符合平时处理的问题的方法

使用轻量级通讯等方式进行整合的设计，就是"合而用之"的方法，合而用之，可以让微小的力量变强大


二，微服务重要组件

跨语言，跨平台，通讯格式    protobuf
通讯协议                 grpc
调度管理服务发现          consul
微服务的框架             micro
部署                    docker


三，protobuf

优点：
    数据化格式可以随意编写

缺点：
    功能简单，无法表示复杂概念
    如果没有    .proto定义    否则无法独处protobuf任何内容


1,安装
    （1）protobuf安装
        https://github.com/protocolbuffers/protobuf
        下载对应系统，放入PATH中
    （2）go 语言插件安装
        https://github.com/grpc-ecosystem/grpc-gateway
        go install 后 在GOPATH bin目录下，有可执行文件，放入 PATH中

2，使用
    (1)protobuf 语法 ，向下兼容
        protobuf 3 可以使用protobuf 2 语法， protobuf2 不能使用protobuf3 语法

   （2）protocol 编译器
        protoc --proto_path= IMPORT_PATH --cpp_out=DST_DIR --python_out=DST_DIR -- go_out=DST_DIR path/to/file.proto

        IMPORT_PATH 声明一个 .proto 文件所在的解析import具体目录，忽略则使用当前目录，多个可以多次调用--proto_path

        --go_out 在目标目录DST_DIR 中产生Go代码

   （3）测试
        protobuf 使用是将，数据结构写入.proto 文件中，使用 protoc 编译器得到一个新的go包，

三，gRPC

    gRPC 是一个高性能、开源和通用的RPC框架，面向移动 和 HTTP/2 设计。 gRPC基于 HTTP/2 编撰设计，
    带来诸如，双向流，流控，头部压缩，单TCP 连接上的多复用。这些在移动设备上表现更好、更省电、和节省空间占用

    RPC 远程过程调用协议，一种通过网络从远程计算机程序上请求服务，不需要了解底层网络技术的协议
    跟访问或者web请求差不多，都是一个client 向远端服务器请求返回结果，但是web请求使用的网络协议是http高层协议，rpc所使用的协议多为TCP，是网络层协议，减少信包装，加快处理速度

    1，过程
        （1）调用客户端句柄；执行传送参数
        （2）调用本地系统内核发送网络消息
        （3）消息传送到远程主机
        （4）服务器句柄得到消息并取得参数
        （5）执行远程过程
        （6）执行到过程将结果返回服务器句柄
        （7）服务器句柄返回结果，调用远程系统内核
        （8）消息传回本地主机
        （9）客户句柄由内核接收消息
        （10）客户端接收句柄返回的数据




// git 要输入 Username for 'https://github.com': 情况
Username => git 邮箱名
password => git tocken  不是密码
